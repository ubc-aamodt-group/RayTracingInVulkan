#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable

layout(binding = 11) readonly buffer SphereArray { vec4[] Spheres; };

hitAttributeEXT vec4 Sphere;

// int debugX = 535;
// int debugY = 435;

void main()
{
	// debugPrintfEXT("Cylinder intersection shader\n");
	const vec4 sphere = Spheres[gl_InstanceCustomIndexEXT];
	const vec3 center = sphere.xyz;
	const float radius = sphere.w;
	
	const vec3 origin = gl_WorldRayOriginEXT;
	const vec3 direction = gl_WorldRayDirectionEXT;
	const float tMin = gl_RayTminEXT;
	const float tMax = gl_RayTmaxEXT;

	// https://en.wikipedia.org/wiki/Quadratic_formula

	const vec3 oc = origin - center;
	const float a = dot(direction.xz, direction.xz);
	const float b = dot(oc.xz, direction.xz);
	const float c = dot(oc.xz, oc.xz) - radius * radius;
	const float discriminant = b * b - a * c;

	// if(gl_LaunchIDEXT.x == debugX && gl_LaunchIDEXT.y == debugY)
	// 	debugPrintfEXT("origin = (%f, %f, %f), direction = (%f, %f, %f), center = (%f, %f, %f), radius = %f, discriminant = %f\n", origin, direction, center, radius, discriminant);

	if (discriminant >= 0)
	{
		// debugPrintfEXT("hit Cylinder\n");
		const float t1 = (-b - sqrt(discriminant)) / a;
		const float t2 = (-b + sqrt(discriminant)) / a;

		const vec3 p1 = origin + direction * t1;
		const vec3 p2 = origin + direction * t2;
		bool hit1 = p1.y <= center.y + radius && p1.y >= center.y - radius;
		bool hit2 = p2.y <= center.y + radius && p2.y >= center.y - radius;

		if ((tMin <= t1 && t1 < tMax && hit1) || (tMin <= t2 && t2 < tMax && hit2))
		{
			Sphere = sphere;
			reportIntersectionEXT((tMin <= t1 && t1 < tMax) ? t1 : t2, 0);
		}
	}
	// else
	// 	debugPrintfEXT("not hit Cylinder\n");
}

