#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable

layout(binding = 10) readonly buffer CubeArray { vec4[] Cubes; };

hitAttributeEXT vec4 Sphere;

// Ray-AABB intersection
float hitAabb(const vec3 aabbMinimum, const vec3 aabbMaximum, const vec3 rayOrigin, const vec3 rayDirection)
{
  vec3  invDir = 1.0 / rayDirection;
  vec3  tbot   = invDir * (aabbMinimum - rayOrigin);
  vec3  ttop   = invDir * (aabbMaximum - rayOrigin);
  vec3  tmin   = min(ttop, tbot);
  vec3  tmax   = max(ttop, tbot);
  float t0     = max(tmin.x, max(tmin.y, tmin.z));
  float t1     = min(tmax.x, min(tmax.y, tmax.z));
  return t1 > max(t0, 0.0) ? t0 : -1.0;
}

void main()
{
	debugPrintfEXT("Cube rint\n");
	const vec4 sphere = Cubes[gl_InstanceCustomIndexEXT];
	const vec3 center = sphere.xyz;
	const float radius = sphere.w;
	//debugPrintfEXT("idx ext %d\n", gl_InstanceCustomIndexEXT);
	//debugPrintfEXT("Cube %f, %f, %f, %f\n",sphere.x, sphere.y, sphere.z, sphere.w);
	const vec3 origin = gl_WorldRayOriginEXT;
	const vec3 direction = gl_WorldRayDirectionEXT;
	const float tMin = gl_RayTminEXT;
	const float tMax = gl_RayTmaxEXT;

	// AABB Bounds
	const vec3 aabbMinimum = center - vec3(radius);
	const vec3 aabbMaximum = center + vec3(radius);

	// Always report the hit since the cube matches the AABB
	float tHit = hitAabb(aabbMinimum, aabbMaximum, origin, direction);
	reportIntersectionEXT(tHit, 0);

//	// https://en.wikipedia.org/wiki/Quadratic_formula
//
//	const vec3 oc = origin - center;
//	const float a = dot(direction, direction);
//	const float b = dot(oc, direction);
//	const float c = dot(oc, oc) - radius * radius;
//	const float discriminant = b * b - a * c;
//
//	if (discriminant >= 0)
//	{
//		const float t1 = (-b - sqrt(discriminant)) / a;
//		const float t2 = (-b + sqrt(discriminant)) / a;
//
//		if ((tMin <= t1 && t1 < tMax) || (tMin <= t2 && t2 < tMax))
//		{
//			Sphere = sphere;
//			//debugPrintfEXT("Cube hit\n");
//			reportIntersectionEXT((tMin <= t1 && t1 < tMax) ? t1 : t2, 0);
//		}
//	}
}

